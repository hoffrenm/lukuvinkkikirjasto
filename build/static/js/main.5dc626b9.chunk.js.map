{"version":3,"sources":["services/tips.js","reducers/tipReducer.js","hooks/index.js","components/AddTip.js","components/TipList.js","App.js","store.js","index.js"],"names":["getAll","a","axios","get","results","data","create","newObject","post","response","initialState","tipdata","processing","error","tipReducer","state","action","type","newTitle","newUrl","name","useField","useState","value","setValue","onChange","event","target","reset","connectedAddTip","connect","tips","addTip","e","tip","dispatch","preventDefault","tipService","result","newTip","props","title","url","removeReset","className","onSubmit","data-cy","id","connectedTipList","length","map","key","connectedApp","initTips","useEffect","path","render","exact","reducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.5dc626b9.chunk.js","sourcesContent":["import axios from 'axios';\nconst baseUrl = '/api/tips';\n\nconst getAll = async () => {\n    const results = await axios.get(baseUrl);\n    return results.data;\n};\n\nconst create = async newObject => {\n    const response = await axios.post(baseUrl, newObject);\n    return response.data;\n};\n\nexport default { getAll, create };","import tipService from '../services/tips';\n\nexport const initTips = () => {\n    return async dispatch => {\n        const tips = await tipService.getAll();\n        dispatch({\n            type: 'INIT_TIPS',\n            data: tips\n        });\n    };\n};\n\nexport const addTip = (e, tip) => {\n    return async dispatch => {\n        e.preventDefault();\n\n        const result = await tipService.create(tip);\n        const newTip = result;\n\n        dispatch({\n            type: 'ADD_TIP',\n            data: newTip,\n            name: 'add'\n        });\n\n        if ( result ) {\n            dispatch({\n                type: 'ACTION_SUCCESS',\n                name: 'add',\n                data: newTip\n            });\n        } else {\n            dispatch({\n                type: 'ACTION_FAIL',\n                data: tip,\n                name: 'add'\n            });\n        }\n    };\n};\n\nconst initialState = {\n    tipdata: [],\n    processing: true,\n    error: null,\n};\n\nconst tipReducer = (state = initialState, action) => {\n    switch (action.type) {\n    case 'INIT_TIPS':\n        return {\n            ...state,\n            processing: true,\n            tipdata: action.data\n        };\n    case 'ADD_TIP':\n        return {\n            ...state,\n            tipdata: [...state.tipdata, action.data],\n            processing: true,\n            newTitle: '',\n            newUrl: ''\n        };\n    case 'ACTION_SUCCESS':\n        return {\n            ...state,\n            [action.name]: false,\n            processing: false,\n            error: null,\n        };\n    case 'ACTION_FAIL':\n        return {\n            ...state,\n            error: action.name,\n            processing: false,\n        };\n    default: return state;\n    }\n};\n\nexport default tipReducer;","import { useState } from 'react';\n\nexport const useField = (type) => {\n    const [value, setValue] = useState('');\n\n    const onChange = (event) => {\n        setValue(event.target.value);\n    };\n\n    const reset = () => {\n        setValue('');\n    };\n\n    return {\n        type,\n        value,\n        onChange,\n        reset\n    };\n};\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addTip } from '../reducers/tipReducer';\nimport { useField } from '../hooks/index';\n\nconst AddTip = (props) => {\n\n    const title = useField('text');\n    const url = useField('text');\n\n    const removeReset = ({ reset: _, ...clone }) => clone;\n\n    return (\n        <div className=\"form form--add-tip\">\n            <h3>Lis채채 vinkki</h3>\n            <form onSubmit={(e) => props.addTip(\n                e,\n                {\n                    title: title.value,\n                    url: url.value\n                }\n            )}>\n                <div>\n                    <label>Otsikko</label>\n                    <input data-cy=\"tip-title\" id=\"tip_title\" { ...removeReset(title) } />\n                </div>\n                <div>\n                    <label>Linkki</label>\n                    <input data-cy=\"tip-url\" id=\"tip_url\" { ...removeReset(url) } />\n                </div>\n                <button className=\"button button-primary button-submit\" data-cy=\"add-tip\" type=\"submit\">Lis채채</button>\n            </form>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        newTitle: state.tips.newTitle,\n        newUrl: state.tips.newUrl\n    };\n};\n\nconst connectedAddTip = connect(\n    mapStateToProps,\n    {\n        addTip\n    }\n)(AddTip);\n\nexport default connectedAddTip;","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst TipList = (props) => {\n\n    if (props.tips.processing) {\n        return <div>Lataillaan...</div>;\n    }\n\n    if ( props.tips.tipdata.length === 0 ) {\n        return null;\n    }\n\n    const tips = props.tips.tipdata;\n\n    return (\n        <div>\n            <h2>Lukuvinkit</h2>\n            {tips.map((tip) => {\n                return (\n                    <div data-cy=\"tip-item\" key={tip.id} className=\"tip-list-item\">\n                        <div className=\"tip-content\">\n                            {tip.title} {tip.url}\n                        </div>\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        tips: state.tips\n    };\n};\n\nconst connectedTipList = connect(mapStateToProps)(TipList);\nexport default connectedTipList;","import React, { useEffect } from 'react';\nimport {Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { initTips } from './reducers/tipReducer';\n\nimport AddTip from './components/AddTip';\nimport TipList from './components/TipList';\n\nconst App = (props) => {\n\n    useEffect(() => {\n        if ( props.tips.processing ) {\n            props.initTips();\n        }\n    }, []);\n\n    return (\n        <div className=\"App\">\n                <h1 className=\"heading heading__h1\">Lukuvinkkikirjasto</h1>\n                <div className=\"content-container\">\n                    <Route path=\"/add-tip\" render={ () =>\n                        <AddTip />\n                    }\n                    />\n\n                    <Route exact path=\"/\" render={() =>\n                        <TipList />\n                    }\n                    />\n                </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        tips: state.tips\n    };\n};\n\nconst connectedApp = connect(\n    mapStateToProps,\n    {\n        initTips,\n    })(App);\nexport default connectedApp;","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport tipReducer from './reducers/tipReducer';\n\nconst reducer = combineReducers({\n    tips: tipReducer\n});\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nexport default store;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport App from './App'\nimport store from './store'\n\nconst render = () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>,\n    document.getElementById('app')\n  )\n}\n\nrender()\nstore.subscribe(render)\n"],"sourceRoot":""}